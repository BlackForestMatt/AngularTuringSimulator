var fs = require('fs');
var code = fs.readFileSync(__dirname + '/../../../dist/turing.js','utf-8');
eval(code);

describe("Compiler", function () {
  var comp;
  var code;

  beforeEach(function () {
    code = null;
    comp = new Compiler();
  });

  it("should initialize", function () {
    expect(comp).toBeDefined();
  });

  it("should set assignments", function () {
    code = comp.compile("start := z0;");
    // 4 is the first number generated by the getState function
    expect(code[0]).toEqual([4]);

    code = comp.compile("blank := _;");
    expect(code[1]).toEqual([0]);

    code = comp.compile("end := {z0};");
    expect(code[2]).toEqual([0, 0, 0, 0, 1]);

    code = comp.compile("end := {z0, z1};");
    expect(code[2]).toEqual([0, 0, 0, 0, 1, 1]);

    code = comp.compile("end := {z0, z1, z2};");
    expect(code[2]).toEqual([0, 0, 0, 0, 1, 1, 1]);
  });

  it("should add functions", function () {
    code = comp.compile("z1, b -> z0, a, <;");
    expect(code[4]).toEqual([5, 3, -1]);

    code = comp.compile("z1, a -> z0, b, >;");
    expect(code[4]).toEqual([5, 3, 1]);

    code = comp.compile("z1, a -> z0, b, >; z1, b -> z2, a, <;");
    expect(code[4]).toEqual([5, 3, 1, 6, 0, -1]);

    code = comp.compile("z1, a -> z0, b, >; z1, b -> z2, a, <; z2, b -> z1, a, >;");
    expect(code[4]).toEqual([5, 3, 1, 6, 0, -1]);
    expect(code[6]).toEqual([0, 0, 0, 4, 0, 1]);
  });

  it("should throw error on duplicate function assignments", function () {
    expect(function () {
      comp.compile("z1, a -> z2, b, >; z1, a -> z1, a, <;");
    }).toThrowError(Error);

    expect(function () {
      comp.compile("z2, b -> z2, b, >; z2, b -> z1, a, <;");
    }).toThrowError(Error);
  });

  it("should thow error on loop detected", function () {
    expect(function () {
      comp.compile("z1, a -> z1, a, -;");
    }).toThrowError(Error);

    expect(function () {
      comp.compile("z2, b -> z2, b, -;");
    }).toThrowError(Error);
  });
});
